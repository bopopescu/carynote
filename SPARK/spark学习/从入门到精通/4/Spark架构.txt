Master:其实，主要是负责资源的调度和分配，还有集群的监控等等职责
Worker，主要负责两个，一个是用自己的内存，存储RDD的某个或者某系partition,另一个是启动其他进程和线程，对RDD上的partition进行处理和计算
Excutor和Task,其实就是执行负责执行，对RDD的partition进行并行的就死uanl，也就是执行我们对RDD定义的，比如map,flatmap,reduce等

Driver进程启动之后，会做一些初始化的操作，在这个过程中，就会发送请求到Master上，进行spark应用程序的注册，说白了，就是让Master知道，有一个新的Spark应用程序要运行

Master,在接收到了Spark应用程序的注册申请之后，会发送请求给Worker，进行资源的调度和分配，ok，说白了，资源分配就是excutor的分配

Worker接收到Mster的请求之后，会为Spark的应用程序启动Executor
executor启动之后，会向Driver进行反注册，这样，Driver就知道，那些executor是为他进行服务的

Driver注册了一些executor之后，就可以开始正式执行我们的spark应用程序了，首先第一步，就是创建初始化的RDD，读取数据源

HDFS文件内容被读取到多个worker节点上，形成内存中的分布式数据集，也就是初始化的RDD

Driver会根据我们对RDD定义的操作，提交一大堆的操作到executor上
task就会对RDD的partition数据执行指定的算子操作，形成新的RDD的partition

使用本地文件和HDFS创建RDD
Spark textFile除了可以针对上述几种普通的文件创建RDD之外，还有一些特列的方法来创建RDD
1.SparkContext.wholeTextFiles()方法，可以针对一个目录中的大量小文件，返回<filename,fileContent>组成的pair,作为一个PairRDD,而不是普通的RDD。普通的
textFile()放回的RDD中，每个元素就是文本中的一行文本
2.SparkContext.sequenceFile[K,V]方法，可以针对SequenceFile创建RDD，K和V泛型类型就是SequenceFile的key和value的类型。K和V要求必须是Hadoop的序列化类型，比如IntWritable,Text等
3.SparkContext.hadoopRDD()方法，对于Hadoop的自定义输入类型，可以创建RDD，该方法接收JobConf,InputFormatClass,Key和Value的Class
4.SparkContext.objectFile()方法，可以针对之前调用RDD.saveAsObjectFile()创建的对象序列化的文件，反序列化的文件，反序列化文件中的数据，并创建一个RDD.

spark支持两种RDD操作，transformation和action,transformation操作会针对已有的RDD创建一个新的RDD，而action则主要是对RDD进行最后的操作，比如遍历，reduce,保存到文件等，并可以返回结果给
Driver程序。

transformation的特点就是lazy特性，lazy特性指的是，如果一个Spark应用中只定义了transformation操作，那么即使你执行该应用，这些操作也不会执行。也就是说，transformation是不会触发spark层序的执行的，它们只是记录了对RDD
所做的操作，但是不会自发执行。只有当transformation之后，接着执行了一个action操作，那么所有的transformation才会执行，Spark通过这种lazy特性，来进行底层的Spark应用执行的优化，避免产生过多的中间结果

要持久化一个RDD，只要调用其cache()或者persist()方法即可。在该RDD第一次被计算出来时，就会直接缓存在每个节点上，而且Spark的持久化机制还是自动容错的，如果持久化的RDD的任何Partition丢失了，那么Spark全自动通过其源RDD，使用transformation操作
重新计算该partition

cache()和persist()的区别在于，chache()是persist（）的一种简化方式，cache(0的底层就是调用persist()的无参版本，同时就是调用persist(MEMORY_ONLY)，将数据持久化到内存中，如果需要从内存中清楚缓存，那么可以使用unpersist()方法

广播变量是只读不写，Accumulator是只写不读的变量，task不能读Accumulator的值，只有Driver变量才能读Accumulator的值，调用Accumulator.value方法读取